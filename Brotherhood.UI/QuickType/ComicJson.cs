using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var comicJson = ComicJson.FromJson(jsonString);

namespace Brotherhood.UI.QuickType
{
    [JsonObject("ComicJson")]
    public partial class ComicJson
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("$values")]
        public ICollection<ComicJsonValue> Values { get; set; }
    }

    [JsonObject("ComicJsonValue")]
    public partial class ComicJsonValue
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("id")]
        public object ValueId { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("cover")]
        public string Cover { get; set; }

        [JsonProperty("dateReleased")]
        public DateTimeOffset DateReleased { get; set; }

        [JsonProperty("genders")]
        public GendersClass Genders { get; set; }

        [JsonProperty("synopsis")]
        public string Synopsis { get; set; }

        [JsonProperty("chapters")]
        public ChaptersClass Chapters { get; set; }
    }

    public partial class ChaptersClass
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("$values")]
        public ChaptersValue[] Values { get; set; }
    }

    public partial class ChaptersValue
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("titleChapter")]
        public string TitleChapter { get; set; }

        [JsonProperty("pages")]
        public Pages Pages { get; set; }

        [JsonProperty("comic")]
        public Comic Comic { get; set; }

        [JsonProperty("Id")]
        public long ValueId { get; set; }

        [JsonProperty("createdOn")]
        public DateTimeOffset CreatedOn { get; set; }

        [JsonProperty("modifiedOn")]
        public DateTimeOffset ModifiedOn { get; set; }
    }

    public partial class Comic
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("Title")]
        public string Title { get; set; }

        [JsonProperty("Cover")]
        public string Cover { get; set; }

        [JsonProperty("DateReleased")]
        public DateTimeOffset DateReleased { get; set; }

        [JsonProperty("Genders")]
        public Genders Genders { get; set; }

        [JsonProperty("Synopsis")]
        public string Synopsis { get; set; }

        [JsonProperty("Chapters")]
        public ChaptersElement Chapters { get; set; }

        [JsonProperty("Id")]
        public long ComicId { get; set; }

        [JsonProperty("createdOn")]
        public DateTimeOffset CreatedOn { get; set; }

        [JsonProperty("modifiedOn")]
        public DateTimeOffset ModifiedOn { get; set; }
    }

    public partial class ChaptersElement
    {
        [JsonProperty("$ref")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Ref { get; set; }
    }

    public partial class Genders
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("$values")]
        public ChaptersElement[] Values { get; set; }
    }

    public partial class Pages
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("$values")]
        public PagesValue[] Values { get; set; }
    }

    public partial class PagesValue
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("pages")]
        public string Pages { get; set; }

        [JsonProperty("chapter")]
        public ChaptersElement Chapter { get; set; }

        [JsonProperty("Id")]
        public long ValueId { get; set; }

        [JsonProperty("createdOn")]
        public DateTimeOffset CreatedOn { get; set; }

        [JsonProperty("modifiedOn")]
        public DateTimeOffset ModifiedOn { get; set; }
    }

    public partial class GendersClass
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("$values")]
        public GendersValue[] Values { get; set; }
    }

    public partial class GendersValue
    {
        [JsonProperty("$id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("Id")]
        public long ValueId { get; set; }

        [JsonProperty("createdOn")]
        public DateTimeOffset CreatedOn { get; set; }

        [JsonProperty("modifiedOn")]
        public DateTimeOffset ModifiedOn { get; set; }
    }

    public partial class ComicJson
    {
        public static ComicJson FromJson(string json) => JsonConvert.DeserializeObject<ComicJson>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ComicJson self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}

