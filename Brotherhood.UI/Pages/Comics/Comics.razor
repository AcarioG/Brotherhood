@page "/comics"
@inject IHttpClientFactory http
@inject IRepository repository


<h3>Comics</h3>
<a href="/comics/create" class="btn btn-info mb-2">Crear</a>

@if (ComicDTO == null)
{
    <p>Cargando......</p>
}
else
{
<div class="card-deck">
    @foreach (var comic in ComicDTO)
    {
        <div class="card">
            @*<img class="card-img-top" src="..." alt="Card image cap">*@
            <div class="card-body">
                <h5 class="card-title">@comic.Title</h5>
                @*<p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>*@
            </div>
            <div class="card-footer">
                <small class="text-muted">Last updated 3 mins ago</small>
            </div>
        </div>
    }
</div>
    }

    @code {
    public List<ComicsDTO> ComicDTO { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.GetAsync<List<ComicsDTO>>("http://localhost:5000/api/comics");
        ComicDTO = responseHttp.Response;

    }


    //try
    //   {
    //       ComicView.ComicJson = await GetComicJsons();
    //   }
    //   catch (Exception)
    //   {

    //       throw;
    //   }

    //    protected async override Task OnInitializedAsync()

    //var client = http.CreateClient("Client");
    //    var response = await client.GetAsync("api/comics", HttpCompletionOption.ResponseContentRead);
    //if (response.IsSuccessStatusCode)
    //{
    //    return await ComicView.GetComicsAsync(response);
    //}
    //return null;


    }
